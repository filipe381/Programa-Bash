#!/bin/bash

msg_trap() {
    echo "Não pode sair desta forma"
}

trap msg_trap SIGINT SIGTERM SIGTSTP

semestre() {
    mes=$(date "+%m")
    if (( mes < 7 )); then
        echo "1"
    else    
        echo "2"
    fi
}



ano=$(date "+%Y")
dia=$(date "+%d")
mes=$(date "+%B")
hora=$(date "+%H")
minutos=$(date "+%M")

menu() {

    sem=$(semestre)

    echo "################################################################"
    printf "# %-60s #\n" "  IBMEC "
    printf "# %-60s #\n" "  Sistemas Operacionais                   Semestre $sem de $ano"
    printf "# %-61s #\n" "  Código: IBM8940                         Turma: 8001"
    printf "# %-60s #\n" "  Professor: Luiz Fernando T. de Farias "
    printf "# %-60s #\n" "------------------------------------------------------------"
    printf "# %-60s #\n" "  Equipe Desenvolvedora: "
    printf "# %-60s #\n" "     Aluno: Filipe Gama "
    printf "# %-60s #\n" "     Aluno: Bernardo Mascarenhas "
    printf "# %-60s #\n" "     Aluno: Marcio Moreira "
    printf "# %-60s #\n" "------------------------------------------------------------"

    printf "# %-60s #\n" "  Rio de Janeiro, $dia de $mes de $ano "
    printf "# %-60s #\n" "  Hora do Sistema: $hora Horas e $minutos Minutos "
    echo "################################################################"
}

escolhas() {
	echo "Escolha uma opção"
	echo "   1)Monitoramento da cpu e memoria"
	echo "   2)Permissões dos arquivos"
	echo "   3)Gerenciador de Processos"
	echo "   4)Realizar Backup De Arquivos"
	echo "   5) Para finalizar o programa"
}
while true; do
    menu
    escolhas
    read -r opcao

    case $opcao in
        1)
            # código da opção 1


monitor_memoria() {
    echo "=== Uso de Memória ==="
    echo "Aqui estão os detalhes sobre a memória do sistema:"
    mem_info=$(free -h)
    echo "$mem_info"

    total_memory=$(echo "$mem_info" | awk 'NR==2{print $2}')  # Total
    used_memory=$(echo "$mem_info" | awk 'NR==2{print $3}')   # Usada
    free_memory=$(echo "$mem_info" | awk 'NR==2{print $4}')   # Livre

    echo "Total de Memória: $total_memory"
    echo "Memória Usada: $used_memory"
    echo "Memória Livre: $free_memory"
    echo "Isso significa que a memória usada é a quantidade de RAM atualmente em uso, enquanto a memória livre está disponível para novos aplicativos."
    echo ""
}

monitor_cpu() {
    echo "=== Uso da CPU ==="
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}') 
    echo "Uso total da CPU: ${cpu_usage}%"

    echo "O uso total da CPU indica a porcentagem de tempo que a CPU está ativa e processando dados."
    echo "Valores mais altos significam que a CPU está sendo muito utilizada, enquanto valores mais baixos indicam que está mais ociosa."
    echo ""
}

while true; do
    clear
    monitor_memoria
    monitor_cpu

    read -t 4 -p "Digite 'exit' para sair ou pressione Enter para continuar: " user_input
    if [[ "$user_input" == "exit" ]]; then
        echo "Saindo do monitoramento..."
        break
    fi

done



	
            ;;
        2)
            # código da opção 2
		clear
listar_arquivos() {
    echo "Digite o diretório que deseja listar (ou pressione Enter para o diretório atual):"
    read dir
    dir=${dir:-.}  # Usa o diretório atual se o usuário pressionar Enter

    # Expande o caminho e verifica se é um diretório válido
    dir=$(eval echo "$dir")
    if [ -d "$dir" ]; then
        echo "Arquivos em $dir:"
        echo "---------------------------------"
        # Tenta listar o conteúdo do diretório; captura erro se não for acessível
        if ! ls -l "$dir" 2>/dev/null; then
            echo "Erro: Você não tem permissão para acessar o diretório $dir."
        else
            ls -l "$dir" | awk '{print $9 ": Dono=" $3 ", Grupo=" $4 ", Permissões=" $1}'
        fi
        echo "---------------------------------"
    else
        echo "Diretório inválido. Tente novamente."
    fi
}

modificar_permissoes() {
    echo "Digite o caminho do arquivo para alterar permissões:"
    read file
    file=$(eval echo "$file")

    if [ -e "$file" ]; then
        if ! ls -l "$file" 2>/dev/null; then
            echo "Erro: Você não tem permissão para acessar o arquivo $file."
            return
        fi

        echo "Permissões atuais de $file:"
        ls -l "$file" | awk '{print "Dono=" $3 ", Grupo=" $4 ", Permissões=" $1}'

        echo "Digite as novas permissões (formato octal, ex: 755)
	para dono, grupo e outros respectivamente:"
        read permissoes

       
        chmod "$permissoes" "$file" 2>/dev/null
        if [ $? -ne 0 ]; then
            echo "Erro: Você não tem permissão para alterar as permissões de $file."
        else
            echo "Permissões alteradas com sucesso. Novas permissões:"
            ls -l "$file" | awk '{print "Dono=" $3 ", Grupo=" $4 ", Permissões=" $1}'
        fi
    else
        echo "Arquivo não encontrado. Tente novamente."
    fi
}

while true; do
    echo "Escolha uma opção:"
    echo "1) Listar arquivos e exibir dono, grupo e permissões"
    echo "2) Modificar permissões de um arquivo"
    echo "3) Sair"
    read opcao

    case $opcao in
        1)
            listar_arquivos
            ;;
        2)
            modificar_permissoes
            ;;
        3)
            echo "Saindo..."
            break
            ;;
        *)
            echo "Opção inválida. Tente novamente."
            ;;
    esac
done

            ;;
        3)
            # código da opção 3

while true; do
    # Limpa a tela para exibir uma nova lista de processos
    clear

    echo "################################################################"
    printf "# %-60s #\n" "   "
    printf "# %-60s #\n" "                    Gerenciador de Tarefas "
    printf "# %-60s #\n" " "
    echo "################################################################"
    echo
    echo "Lista de processos (PID, CPU%, MEM%, Nome):"
    echo

    # Lista os processos com PID, uso de CPU, uso de Memória e Nome do Processo
    ps -e -o pid,%cpu,%mem,comm --sort=-%mem | head -n 15

    echo
    echo "Digite o PID do processo que deseja encerrar (ou 'q' para sair):"
    read -r pid

    # Verifica se o usuário quer sair
    if [[ "$pid" == "q" ]]; then
        echo "Saindo do Gerenciador de Tarefas..."
        break
    fi

    # Tenta encerrar o processo com o PID informado
    if kill "$pid" 2>/dev/null; then
        echo "Processo com PID $pid encerrado com sucesso."
    else
        echo "Falha ao encerrar o processo. Verifique o PID e tente novamente."
    fi

    # Pausa para que o usuário veja a mensagem
    sleep 2
done

            ;;
        4)
		clear
# Função para criar um backup do arquivo
backup_arquivo() {
	
    echo "Digite o caminho completo do arquivo que deseja fazer o backup:"
    read arquivo
    arquivo=$(eval echo "$arquivo")

    # Verifica se o arquivo existe e é acessível
    if [ ! -f "$arquivo" ]; then
        echo "Erro: Arquivo não encontrado ou inacessível. Tente novamente."
        return
    fi

    echo "Digite o diretório de destino para o backup:"
    read destino
    destino=$(eval echo "$destino")

    # Cria o diretório de destino se ele não existir
    if [ ! -d "$destino" ]; then
        echo "Diretório de destino não existe. Criando $destino..."
        mkdir "$destino" 2>/dev/null
        if [ $? -ne 0 ]; then
            echo "Erro: Não foi possível criar o diretório de destino. Verifique as permissões."
            return
        fi
    fi

    # Define o nome do arquivo de backup
    nome_backup=$(basename "$arquivo")
    data=$(date +%Y%m%d_%H%M%S)
    backup_path="$destino/${nome_backup}_backup_$data.tar.gz"

    # Realiza o backup usando tar
    tar -czf "$backup_path" "$arquivo" 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "Erro: Não foi possível criar o backup. Verifique as permissões."
    else
        echo "Backup criado com sucesso em: $backup_path"
    fi
}
            # Menu principal
while true; do
    echo "Escolha uma opção:"
    echo "1) Fazer backup de um arquivo"
    echo "2) Sair"
    read opcao

    case $opcao in
        1)
            backup_arquivo
            ;;
        2)
            echo "Saindo..."
            break
            ;;
        *)
            echo "Opção inválida. Tente novamente."
            ;;
    esac
done
		;;
        5)
            echo "Saindo do programa..."
            exit 0
            ;;
        *)
            echo "Opção inválida. Tente novamente."
            ;;
    esac
done


